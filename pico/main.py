from connections import connect_mqtt, connect_internet
from machine import Pin, ADC
import dht, time
from time import sleep

# The following functions are placeholders for actual sensor reading functions, 
# which will be eventually implemented in separate modules and imported here

def get_light_value():
    """
    Gets adc value from photoresistor, returns a float for the lumens.
    Assuming to use a 3k ohm resistor in series with the photoresistor
    for the voltage divider. ADC measures voltage relative to ground
    across photoresistor.

    *** prints adc val for now for adjusting of values ***

    Args:
        photoresistor_ADC_pin (ADC): the ADC pin set to read the photresistor voltage

    Returns:
        float: the value of luminosity in lumens
    """

    photo_ADC = ADC(Pin(26)) # can change this value for different adc pins
    
    MAX_ADC = 65000
    ADC_RANGE = MAX_ADC - 1200 # dont change
    adc_val = photo_ADC.read_u16()

    print(f"adc val: {adc_val}", end = "\t")
    lumens = (-adc_val + MAX_ADC)/(ADC_RANGE)

    return lumens

def get_humidity_value():
    """Get the current humidity value from the DHT11 sensor.

    Returns:
        int: The current humidity value.
    """

    dht11 = dht.DHT11(Pin(2))
    CONST_DIFF_TEMP = 77-71
    CONST_DIFF_HUMIDITY = 52 - 61

    dht11.measure()
    humidity = dht11.humidity() - CONST_DIFF_HUMIDITY

    return humidity

def get_temperature_value():
    """Get the current temperature value from the DHT11 sensor.

    Returns:
        float: The current temperature value.
    """

    dht11 = dht.DHT11(Pin(2))
    CONST_DIFF_TEMP = 77-71
    CONST_DIFF_HUMIDITY = 52 - 61

    dht11.measure()
    temp_C = dht11.temperature()
    temp_F = temp_C * 9/5 + 32 - CONST_DIFF_TEMP

    return temp_F

def get_ultrasonic_value():
    """Get the current ultrasonic value.

    Returns:
        int: The current ultrasonic value.
    """
    return 100

def get_image_desc():
    """Captures a picture, sends it to chatgpt, and returns the image along with its description generated by chatgpt.

    Returns:
        dictionary: A dictionary containing the image data and its description.
    """
    return {"image_data": "image_data_placeholder", "description": "A picture of the surroundings."}

# The following function is a callback function that handles all messages published to the Pico's subscribed topics
def handle_message(topic, msg):
    if   topic == b'request-light':
        print(f"Pico received light request: {msg}")
        light_value = get_light_value()
        client.publish("light", str(light_value))
    elif topic == b'request-humidity':
        print(f"Pico received humidity request: {msg}")
        humidity_value = get_humidity_value() 
        client.publish("humidity", str(humidity_value))
    elif topic == b'request-temp':
        print(f"Pico received temperature request: {msg}")
        temperature_value = get_temperature_value() 
        client.publish("temperature", str(temperature_value))
    elif topic == b'request-ultrasonic':
        print(f"Pico received ultrasonic request: {msg}")
        ultrasonic_value = get_ultrasonic_value() 
        client.publish("ultrasonic", str(ultrasonic_value))
    elif topic == b'request-image-desc':
        print(f"Pico received image request: {msg}")
        image_desc_dict = get_image_desc()
        json_data = ujson.dumps(image_desc_dict)
        client.publish("image_desc", json_data)

# The following function is the main function that connects to Wi-Fi and MQTT broker, 
# subscribes to topics, and iteratively keeps checking for new messages in subscribed topics, 
# and handles them accordingly (using the handle_message function defined above)
def main():
    try:
        # connect to Wi-Fi and MQTT broker
        connect_internet("WIFI_NAME", password="WIFI_PASSWORD")  # SSID and password
        client = connect_mqtt(
            "a1cb083513d9469b91404a586179490c.s1.eu.hivemq.cloud",
            "MQTT_USERNAME",
            "MQTT_PASSWORD"
        )

        # Set the message callback handler
        client.set_callback(handle_message)

        # subscribe to necessary topics
        client.subscribe("request-light")
        client.subscribe("request-humidity")
        client.subscribe("request-temp")
        client.subscribe("request-ultrasonic")
        client.subscribe("request-image")

        # keep checking for new messages in subscribed topics
        while True:
            client.check_msg()
            sleep(0.1)

    except KeyboardInterrupt:
        print('Keyboard interrupt')

if __name__ == "__main__":
    main()